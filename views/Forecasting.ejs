<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta name="description" content="">
  <meta name="author" content="">
  <link href="img/logo/logo.png" rel="icon">
  <title>SalesWave - Sales Forecasting</title>
  <link href="vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">
  <link href="vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet" type="text/css">
  <link href="css/ruang-admin.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/daterangepicker@3.0.5/daterangepicker.css" rel="stylesheet">
</head>

<body id="page-top">
  <div id="wrapper">
    <!-- Sidebar -->
    <ul class="navbar-nav sidebar sidebar-light accordion" id="accordionSidebar">
      <a class="sidebar-brand d-flex align-items-center justify-content-center" href="#">
        <div class="sidebar-brand-icon">
          <img src="img/logo/logo2.png" />
        </div>
        <div class="sidebar-brand-text mx-3">SalesWave</div>
      </a>
      <hr class="sidebar-divider my-0" />
      <li class="nav-item">
        <a class="nav-link" href="#">
          <i class="fas fa-fw fa-tachometer-alt"></i>
          <span>Dashboard</span></a>
      </li>
      <hr class="sidebar-divider" />
      <div class="sidebar-heading">Features</div>

      <li class="nav-item">
        <a class="nav-link" href="reports">
          <i class="fas fa-fw fa-palette"></i>
          <span>Reports</span>
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="Forecasting">
          <i class="fas fa-fw fa-palette"></i>
          <span>Forecasting</span>
        </a>
      </li>
      <div class="version" id="version-ruangadmin"></div>
    </ul>
  
    <div id="content-wrapper" class="d-flex flex-column">
      <div id="content">
        <!-- TopBar -->
        <nav class="navbar navbar-expand navbar-light bg-navbar topbar mb-4 static-top">
          <button id="sidebarToggleTop" class="btn btn-link rounded-circle mr-3">
            <i class="fa fa-bars"></i>
          </button>
          <ul class="navbar-nav ml-auto">
            <div class="topbar-divider d-none d-sm-block"></div>
            <li class="nav-item dropdown no-arrow">
              <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-toggle="dropdown"
                aria-haspopup="true" aria-expanded="false">
                <img class="img-profile rounded-circle" src="img/boy.png" style="max-width: 60px" />
                <span class="ml-2 d-none d-lg-inline text-white small">Mark
                  Tarzan</span>
              </a>
              <div class="dropdown-menu dropdown-menu-right shadow animated--grow-in" aria-labelledby="userDropdown">
                <div class="dropdown-divider"></div>
                <a class="dropdown-item" href="javascript:void(0);" data-toggle="modal" data-target="#logoutModal">
                  <i class="fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400"></i>
                  Logout
                </a>
              </div>
            </li>
          </ul>
        </nav>
        <!-- TopBar -->

        <!-- Container Fluid -->
        <div class="container-fluid" id="container-wrapper">
          <div class="d-sm-flex align-items-center justify-content-between mb-4">
            <h1 class="h3 mb-0 text-gray-800">Forecasts</h1>
            <ol class="breadcrumb">
              <li class="breadcrumb-item">Pages</li>
              <li class="breadcrumb-item active" aria-current="page">Forecasting Page</li>
            </ol>
          </div>
          <div class="row">
            <div class="col-lg-12">
              <div class="card mb-4">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                  <h6 class="m-0 font-weight-bold text-primary">Products Forecasts</h6>
                  <div class="col-md-4">
                    <select class="select2-single form-control form-control-sm w-50" name="state" id="select2Single">
                      <option value="" selected disabled>Select Product</option>
                      <option value="Eggs">Eggs</option>
                      <option value="Rice">Rice</option>
                      <option value="Cookies">Cookies</option>
                      <option value="Cakes">Cakes</option>
                    </select>
                  </div>
                  <div class="col-md-4">
                    <input type="text" class="form-control form-control-sm w-50" id="dateRangeInput"
                      placeholder="Select Date Range:">
                  </div>
                  <button type="button" class="btn btn-outline-secondary mb-1 btn-sm"
                    onclick="handleForecastClick()">Forecast</button>
                </div>
                <div class="card-body">
                  <div class="chart-bar">
                    <canvas id="lineChart"></canvas>
                  </div>
                </div>

              </div>
            </div>
          </div>
        </div>

        <div class="table-responsive p-3">
          <table class="table align-items-center table-flush" id="dataTable">
            <thead class="thead-light">
              <tr>
                <th>DAILY</th>
                <th>WEEKLY</th>
                <th>MONTHLY</th>
                
              </tr>
            </thead>
            <tfoot>
              <tr>
                <th>DAILY</th>
                <th>WEEKLY</th>
                <th>MONTH</th>
               
              </tr>
            </tfoot>
            <tbody>
              <!-- Table data will be populated dynamically -->
            </tbody>
          </table>
        </div>
        <!-- Modal Logout -->
        <div class="modal fade" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabelLogout"
          aria-hidden="true">
          <div class="modal-dialog" role="document">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabelLogout">
                  Ohh No!
                </h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                  <span aria-hidden="true">&times;</span>
                </button>
              </div>
              <div class="modal-body">
                <p>Are you sure you want to logout?</p>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-outline-primary" data-dismiss="modal">
                  Cancel
                </button>
                <a id="logout-button" class="btn btn-primary">Logout</a>
              </div>
            </div>
          </div>
        </div>
      </div>
      <footer class="sticky-footer bg-white">
        <div class="container my-auto">
          <div class="copyright text-center my-auto">
            <span>copyright &copy;
              <script>
                document.write(new Date().getFullYear());
              </script>
              - developed by
              <b><a href="#" target="_blank">SalesWave</a></b>
            </span>
          </div>
        </div>
      </footer>
    </div>
  </div>
    
  

  
  <!-- Scroll to top -->
  <a class="scroll-to-top rounded" href="#page-top">
    <i class="fas fa-angle-up"></i>
  </a>

  <!-- JavaScript Libraries -->
  <script src="vendor/jquery/jquery.min.js"></script>
  <script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
  <script src="vendor/jquery-easing/jquery.easing.min.js"></script>
  <script src="js/ruang-admin.min.js"></script>

  <!-- Additional Libraries -->
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>


  <script>

    // Function to fetch data from the historical data endpoint
    function fetchHistoricalData(selectedProduct) {
  const historicalDataEndpoint = `http://localhost:5000/report/${encodeURIComponent(selectedProduct)}`;

  return axios.get(historicalDataEndpoint)
    .then(response => {
      // Assuming the response data is an array of objects containing orderDate and sales fields.
      const historicalData = response.data;
      
      // Extract the orderDates and sales from the response data.
      const orderDates = historicalData.map(item => item.orderDate);
      const sales = historicalData.map(item => item.sales);

      // Log the fetched data (optional)
      console.log("Historical Dates:", orderDates);
      console.log("Historical Values:", sales);
      
      return { orderDates, sales };
    })
    .catch(error => {
      console.error("Error fetching historical data:", error);
      return { orderDates: [], sales: [] }; // Return empty arrays to handle the error gracefully
    });
}


    // Function to fetch forecasted data from the forecast endpoint
    function fetchForecastData(selectedProduct, encodedDateRange) {
      const forecastDataEndpoint = `http://localhost:5000/forecasts/${encodeURIComponent(selectedProduct)}/${encodedDateRange}`;
      console.log("Forecast Data Endpoint:", forecastDataEndpoint);

      return axios.get(forecastDataEndpoint)
        .then(response => {
          console.log("Forecast Data:", response.data);

          // Access the forecast values for the next 3 days (assuming they are the first array in the response)
          const forecastForNext3Days = response.data['Forecast for the next 3 days'];

          // Log the values for the next 3 days
          console.log("Forecast for the next 3 days:");
          console.log(forecastForNext3Days);

          return response.data;
        })
        .catch(error => {
          console.error("Error fetching forecast data:", error);
          return []; // Return an empty array to handle the error gracefully
        });
    }
    function drawLineGraph(labels, historicalValues, forecastValues) {
  // Get the last three dates from the historical data as labels for the forecasted data
  const lastThreeDates = labels.slice(-3);

  // Generate custom labels for forecasted data
  const forecastLabels = lastThreeDates.map((date, index) => `Prediction ${index + 1}`);

  // Combine historical and forecast values into a single array
  const combinedValues = historicalValues.concat(forecastValues);

  // Combine historical and forecast labels into a single array
  const combinedLabels = labels.concat(forecastLabels);

  const ctx = document.getElementById('lineChart').getContext('2d');
  const myLineChart = new Chart(ctx, {
    type: 'line',
    data: {
      labels: combinedLabels,
      datasets: [
        {
          label: 'Historical Data',
          data: historicalValues,
          borderColor: 'rgba(255, 99, 132, 1)',
          backgroundColor: 'rgba(255, 99, 132, 0.2)',
          fill: true,
        },
        {
          label: 'Forecasted Data',
          data: combinedValues,
          borderColor: 'rgba(54, 162, 235, 1)',
          backgroundColor: 'rgba(54, 162, 235, 0.2)',
          fill: true,
        }
      ],
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      // Add more customization options as needed
    },
  });
}

   
function handleForecastClick() {
  const selectedProduct = document.getElementById("select2Single").value;
  const dateRangeInput = document.getElementById("dateRangeInput").value;

  // Check if both product and date range are selected
  if (selectedProduct && dateRangeInput) {
    // Split the date range into start and end dates
    const [startDate, endDate] = dateRangeInput.split(" - ");

    // Format the start and end dates correctly
    const formattedStartDate = formatDate(startDate);
    const formattedEndDate = formatDate(endDate);

    // Combine the formatted dates with "to" in between
    const dateRange = `${formattedStartDate} to ${formattedEndDate}`;

    // Encode the date range before constructing the URL
    const encodedDateRange = encodeURIComponent(dateRange);

    // Fetch historical data and forecasted data
    Promise.all([
      fetchHistoricalData(selectedProduct),
      fetchForecastData(selectedProduct, encodedDateRange),
    ])
      .then(([historicalData, forecastData]) => {
        // Extract necessary data from the API responses (e.g., labels, values)
        const labels = historicalData.orderDates; // Changed from historicalData.dates
        const historicalValues = historicalData.sales; // Changed from historicalData.values
        const forecastValues = forecastData['Forecast for the next 3 days'];

        // Draw the line graph using the fetched data
        drawLineGraph(labels, historicalValues, forecastValues);

        // Populate the table with forecasted data
        populateForecastTable(forecastData);
      })
      .catch(error => {
        console.error('Error fetching data:', error);
      });
  } else {
    alert("Please select a product and date range.");
  }
}

// Function to populate the forecast table
function populateForecastTable(forecastData) {
  const tableBody = document.querySelector("#dataTable tbody");
  tableBody.innerHTML = "";

  // Forecast for the next 3 days
  const forecastForNext3Days = forecastData['Forecast for the next 3 days'];
  const forecastForNext3Weeks = forecastData['Forecast for the next 3 weeks'];
  const forecastForNext3Months = forecastData['Forecast for the next 3 months'];

  for (let i = 0; i < 3; i++) {
    const row = document.createElement("tr");

    // DAILY forecast value
    const dailyCell = document.createElement("td");
    dailyCell.textContent = forecastForNext3Days[i];
    row.appendChild(dailyCell);

    // WEEKLY forecast value
    const weeklyCell = document.createElement("td");
    weeklyCell.textContent = forecastForNext3Weeks[i];
    row.appendChild(weeklyCell);

    // MONTHLY forecast value
    const monthlyCell = document.createElement("td");
    monthlyCell.textContent = forecastForNext3Months[i];
    row.appendChild(monthlyCell);

    tableBody.appendChild(row);
  }
}

// Function to fetch and plot data
    function fetchAndPlotData() {
      // Function implementation...
    }


    function formatDate(dateString) {
      const date = new Date(dateString);
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, "0");
      const day = String(date.getDate()).padStart(2, "0");
      return `${year}-${month}-${day}`;
    }

    function fetchAndPopulateTable(monthlyData) {
      const tableBody = document.querySelector("#dataTable tbody");
      tableBody.innerHTML = "";

      monthlyData.forEach(item => {
        const row = document.createElement("tr");
        const labelCell = document.createElement("td");
        const valueCell = document.createElement("td");

        labelCell.textContent = item.Date;
        valueCell.textContent = item.Prediction;

        row.appendChild(labelCell);
        row.appendChild(valueCell);
        tableBody.appendChild(row);
      });
    }
  </script>

  <script>
    // Wait for the document to be ready
    document.addEventListener("DOMContentLoaded", function () {
      // Initialize the date range picker
      const dateRangeInput = document.getElementById("dateRangeInput");
      $(dateRangeInput).daterangepicker({
        opens: "center", // Show the date picker in the center
        startDate: "2015-06-30",
        endDate: "2020-05-03",
        locale: {
          format: "YYYY-MM-DD",
        },
      });
    });
  </script>
  <!-- Other scripts -->
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/moment@2.29.1/moment.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/daterangepicker@3.0.5/daterangepicker.min.js"></script>
</body>

</html>